{"id":"../node_modules/react-stockcharts/lib/utils/barWidth.js","dependencies":[{"name":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/node_modules/react-stockcharts/lib/utils/barWidth.js.map","includedInParent":true,"mtime":1536032207000},{"name":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/package.json","includedInParent":true,"mtime":1602365273866},{"name":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/public/.babelrc","includedInParent":true,"mtime":1602365273866},{"name":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/node_modules/react-stockcharts/package.json","includedInParent":true,"mtime":1602365360568},{"name":"../utils","loc":{"line":12,"column":21},"parent":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/node_modules/react-stockcharts/lib/utils/barWidth.js","resolved":"/home/hemanth/Desktop/Itarle/OpenFinWithReactReduxParcel/node_modules/react-stockcharts/lib/utils/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.plotDataLengthBarWidth = plotDataLengthBarWidth;\nexports.timeIntervalBarWidth = timeIntervalBarWidth;\n\nvar _utils = require(\"../utils\");\n\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\nfunction plotDataLengthBarWidth(props, moreProps) {\n\tvar widthRatio = props.widthRatio;\n\tvar xScale = moreProps.xScale;\n\n\tvar _xScale$range = xScale.range(),\n\t    _xScale$range2 = _slicedToArray(_xScale$range, 2),\n\t    l = _xScale$range2[0],\n\t    r = _xScale$range2[1];\n\n\tvar totalWidth = Math.abs(r - l);\n\tif (xScale.invert != null) {\n\t\tvar _xScale$domain = xScale.domain(),\n\t\t    _xScale$domain2 = _slicedToArray(_xScale$domain, 2),\n\t\t    dl = _xScale$domain2[0],\n\t\t    dr = _xScale$domain2[1];\n\n\t\tvar width = totalWidth / Math.abs(dl - dr);\n\t\treturn width * widthRatio;\n\t} else {\n\t\tvar _width = totalWidth / xScale.domain().length;\n\t\treturn _width * widthRatio;\n\t}\n}\n\n/**\n * Generates a width function that calculates the bar width based on the given time interval.\n * @param interval a d3-time time interval.\n * @return {Function} the width function.\n */\nfunction timeIntervalBarWidth(interval) {\n\treturn function (props, moreProps) {\n\t\tvar widthRatio = props.widthRatio;\n\t\tvar xScale = moreProps.xScale,\n\t\t    xAccessor = moreProps.xAccessor,\n\t\t    plotData = moreProps.plotData;\n\n\n\t\tvar first = xAccessor((0, _utils.head)(plotData));\n\t\treturn Math.abs(xScale(interval.offset(first, 1)) - xScale(first)) * widthRatio;\n\t};\n}\n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/lib/utils/barWidth.js"],"names":["plotDataLengthBarWidth","timeIntervalBarWidth","props","moreProps","widthRatio","xScale","range","l","r","totalWidth","Math","abs","invert","domain","dl","dr","width","length","interval","xAccessor","plotData","first","offset"],"mappings":";;;;;;;;QAWgBA,sB,GAAAA,sB;QAsBAC,oB,GAAAA,oB;;AA/BhB;;AAEA;;;;;;;AAOO,SAASD,sBAAT,CAAgCE,KAAhC,EAAuCC,SAAvC,EAAkD;AAAA,KAChDC,UADgD,GACjCF,KADiC,CAChDE,UADgD;AAAA,KAEhDC,MAFgD,GAErCF,SAFqC,CAEhDE,MAFgD;;AAAA,qBAIzCA,OAAOC,KAAP,EAJyC;AAAA;AAAA,KAIjDC,CAJiD;AAAA,KAI9CC,CAJ8C;;AAMxD,KAAMC,aAAaC,KAAKC,GAAL,CAASH,IAAID,CAAb,CAAnB;AACA,KAAIF,OAAOO,MAAP,IAAiB,IAArB,EAA2B;AAAA,uBACTP,OAAOQ,MAAP,EADS;AAAA;AAAA,MACnBC,EADmB;AAAA,MACfC,EADe;;AAE1B,MAAMC,QAAQP,aAAaC,KAAKC,GAAL,CAASG,KAAKC,EAAd,CAA3B;AACA,SAAOC,QAAQZ,UAAf;AACA,EAJD,MAIO;AACN,MAAMY,SAAQP,aAAaJ,OAAOQ,MAAP,GAAgBI,MAA3C;AACA,SAAOD,SAAQZ,UAAf;AACA;AACD;;AAED;;;;;AAKO,SAASH,oBAAT,CAA8BiB,QAA9B,EAAwC;AAC9C,QAAO,UAAShB,KAAT,EAAgBC,SAAhB,EAA2B;AAAA,MACzBC,UADyB,GACVF,KADU,CACzBE,UADyB;AAAA,MAEzBC,MAFyB,GAEOF,SAFP,CAEzBE,MAFyB;AAAA,MAEjBc,SAFiB,GAEOhB,SAFP,CAEjBgB,SAFiB;AAAA,MAENC,QAFM,GAEOjB,SAFP,CAENiB,QAFM;;;AAIjC,MAAMC,QAAQF,UAAU,iBAAKC,QAAL,CAAV,CAAd;AACA,SAAOV,KAAKC,GAAL,CAASN,OAAOa,SAASI,MAAT,CAAgBD,KAAhB,EAAuB,CAAvB,CAAP,IAAoChB,OAAOgB,KAAP,CAA7C,IAA8DjB,UAArE;AACA,EAND;AAOA","file":"barWidth.js","sourcesContent":["\n\nimport { head } from \"../utils\";\n\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\nexport function plotDataLengthBarWidth(props, moreProps) {\n\tconst { widthRatio } = props;\n\tconst { xScale } = moreProps;\n\n\tconst [l, r] = xScale.range();\n\n\tconst totalWidth = Math.abs(r - l);\n\tif (xScale.invert != null) {\n\t\tconst [dl, dr] = xScale.domain();\n\t\tconst width = totalWidth / Math.abs(dl - dr);\n\t\treturn width * widthRatio;\n\t} else {\n\t\tconst width = totalWidth / xScale.domain().length;\n\t\treturn width * widthRatio;\n\t}\n}\n\n/**\n * Generates a width function that calculates the bar width based on the given time interval.\n * @param interval a d3-time time interval.\n * @return {Function} the width function.\n */\nexport function timeIntervalBarWidth(interval) {\n\treturn function(props, moreProps) {\n\t\tconst { widthRatio } = props;\n\t\tconst { xScale, xAccessor, plotData } = moreProps;\n\n\t\tconst first = xAccessor(head(plotData));\n\t\treturn Math.abs(xScale(interval.offset(first, 1)) - xScale(first)) * widthRatio;\n\t};\n}\n"]}},"error":null,"hash":"5f35a9f4dfab73f53c06f517243bf2a9","cacheData":{"env":{}}}